[tox]
envlist = linters,scenario-rhel,scenario-f5,scenario-security,scenario-windows,scenario-networking,scenario-smart_mgmt
skipsdist = true

[testenv]

[testenv:linters]
deps =
    -r{toxinidir}/test-requirements.txt
commands =
    yamllint -s .

[testenv:scenarios]
sitepackages = True
whitelist_externals =
    ansible-playbook
    ansible-galaxy
    bash
    curl
deps =
    ansible-core
    netaddr
    pywinrm
    requests
    requests-credssp
    boto
    boto3
    paramiko
    # TODO(spredzy): This is to by-pass a current issue in CI that causes CI to
    # pull urllib3==1.24.2 randomly and runs end up failing with
    # ModuleNotFoundError: No module named 'urllib3.packages.six'
    urllib3 >= 1.25.10
setenv =
    ANSIBLE_CONFIG = provisioner/ansible.cfg
    # globally add more retries and clientside delays to boto functions to fix AWS throttling/timeouts
    # https://github.com/boto/botocore/blob/master/botocore/configprovider.py#L99
    AWS_MAX_ATTEMPTS = 10
    AWS_RETRY_MODE = standard
passenv =
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    scenarioS_CHANGE_ID
commands_pre =
    python provisioner/tests/generate_ci_common.py
    ansible --version
    ansible-galaxy collection build --verbose --output-path build/
    # tox doesn't expand wildcards, so we run a shell to expand it explicitly
    /bin/sh -c 'ansible-galaxy collection install --verbose build/*.tar.gz'
    # monkeypatching to prevent route53 throttling (backoffs and pauses are ineffective)
    /bin/sh -c 'sed -E -i -e "s/record_sets = .*build_full_result\(\)/record_sets = client.list_resource_record_sets(**params)/" "$(find /root/ /home/ /usr/ -name route53_info.py)"'
[testenv:scenario-rhel]
sitepackages =
    {[testenv:scenarios]sitepackages}
whitelist_externals =
    {[testenv:scenarios]whitelist_externals}
deps =
    {[testenv:scenarios]deps}
setenv =
    {[testenv:scenarios]setenv}
passenv =
    {[testenv:scenarios]passenv}
commands_pre =
    {[testenv:scenarios]commands_pre}
commands =
    ansible-playbook provisioner/provision_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-rhel.yml
    bash ./provisioner/tests/verify-rhel.sh
commands_post =
    ansible-playbook provisioner/teardown_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-rhel.yml

[testenv:scenario-security]
sitepackages =
    {[testenv:scenarios]sitepackages}
whitelist_externals =
    {[testenv:scenarios]whitelist_externals}
deps =
    {[testenv:scenarios]deps}
setenv =
    {[testenv:scenarios]setenv}
passenv =
    {[testenv:scenarios]passenv}
commands_pre =
    {[testenv:scenarios]commands_pre}
commands =
    ansible-playbook provisioner/provision_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-security.yml
commands_post =
    ansible-playbook provisioner/teardown_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-security.yml

[testenv:scenario-f5]
sitepackages =
    {[testenv:scenarios]sitepackages}
whitelist_externals =
    {[testenv:scenarios]whitelist_externals}
deps =
    {[testenv:scenarios]deps}
setenv =
    {[testenv:scenarios]setenv}
passenv =
    {[testenv:scenarios]passenv}
commands_pre =
    {[testenv:scenarios]commands_pre}
commands =
    ansible-playbook provisioner/provision_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-f5.yml
    bash ./provisioner/tests/verify-f5.sh
commands_post =
    ansible-playbook provisioner/teardown_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-f5.yml

[testenv:scenario-windows]
sitepackages =
    {[testenv:scenarios]sitepackages}
whitelist_externals =
    {[testenv:scenarios]whitelist_externals}
deps =
    {[testenv:scenarios]deps}
setenv =
    {[testenv:scenarios]setenv}
passenv =
    {[testenv:scenarios]passenv}
commands_pre =
    {[testenv:scenarios]commands_pre}
commands =
    ansible-playbook provisioner/provision_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-windows.yml
commands_post =
    ansible-playbook provisioner/teardown_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-windows.yml

[testenv:scenario-networking]
sitepackages =
    {[testenv:scenarios]sitepackages}
whitelist_externals =
    {[testenv:scenarios]whitelist_externals}
deps =
    {[testenv:scenarios]deps}
setenv =
    {[testenv:scenarios]setenv}
passenv =
    {[testenv:scenarios]passenv}
commands_pre =
    {[testenv:scenarios]commands_pre}
commands =
    ansible-playbook provisioner/provision_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-networking.yml
commands_post =
    ansible-playbook provisioner/teardown_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-networking.yml

[testenv:scenario-smart_mgmt]
sitepackages =
    {[testenv:scenarios]sitepackages}
whitelist_externals =
    {[testenv:scenarios]whitelist_externals}
deps =
    {[testenv:scenarios]deps}
setenv =
    {[testenv:scenarios]setenv}
passenv =
    {[testenv:scenarios]passenv}
commands_pre =
    {[testenv:scenarios]commands_pre}
commands =
    ansible-playbook provisioner/provision_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-smart_mgmt.yml
    bash ./provisioner/tests/verify-rhel.sh
commands_post =
    ansible-playbook provisioner/teardown_lab.yml \
      -e @provisioner/tests/vars.yml \
      -e @provisioner/tests/ci-common.yml \
      -e @provisioner/tests/ci-smart_mgmt.yml

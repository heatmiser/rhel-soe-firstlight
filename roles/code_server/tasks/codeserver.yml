---
- name: stop controller
  include_tasks: "service/controller_stop.yml"

- name: dns for coder
  become: false
  community.aws.route53:
    state: "{{ s3_state }}"
    zone: "{{ workshop_dns_zone }}"
    record: "{{ student }}-code.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }}"
    type: A
    overwrite: true
    value: "{{ ansible_host }}"
  delegate_to: localhost
  register: route53_status
  when: workshop_type is defined

- name: handle GH timeouts
  block:
    - name: Download code-server 3 rpm
      get_url:
        url: "{{ codeserver_url }}"
        dest: /tmp/code-server.rpm
        mode: '0440'
  rescue:
    - name: Download code-server 3 rpm from s3
      get_url:
        url: "{{ codeserver_rescue_url }}"
        dest: /tmp/code-server.rpm
        mode: '0440'

- name: install code-server 3 rpm from local rpm and certbot
  dnf:
    name:
      - /tmp/code-server.rpm
      - certbot
    state: present
    disable_gpg_check: true

# solves error
# pkg_resources.DistributionNotFound: The 'requests>=2.14.2' distribution was not found and is required by acme
- name: Install requests python package
  pip:
    name: requests>=2.14.2

- name: Apply our systemd service file (instead of RPM file)
  template:
    src: code-server.service.j2
    dest: /etc/systemd/system/code-server.service
    owner: "{{ username }}"
    group: wheel
    mode: '0744'

    # source: https://vscode.readthedocs.io/en/latest/getstarted/settings/
- name: ensure custom facts directory exists
  file:
    path: "/home/{{ username }}/.local/share/code-server/User/"
    recurse: true
    state: directory
    owner: "{{ username }}"

- name: apply code server defaults
  template:
    src: settings.json
    dest: "/home/{{ username }}/.local/share/code-server/User/settings.json"
    owner: "{{ username }}"

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /home/{{ username }}/.local/share/code-server/extensions/
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Download files for vscode
  get_url:
    url: "{{ item }}"
    dest: /home/{{ username }}/.local/share/code-server/extensions/
    owner: "{{ username }}"
    group: "{{ username }}"
  loop:
    - https://github.com/ansible/workshops/raw/devel/files/bierner.markdown-preview-github-styles-0.1.6.vsix
    - https://github.com/ansible/workshops/raw/devel/files/hnw.vscode-auto-open-markdown-preview-0.0.4.vsix
    - https://github.com/ansible/workshops/raw/devel/files/redhat.ansible-0.4.5.vsix
  register: download_extension
  until: download_extension is not failed
  retries: 5

- name: install ansible and markdown extensions
  become_user: "{{ username }}"
  command: "/bin/code-server --install-extension /home/{{ username }}/.local/share/code-server/extensions/{{ item }}"
  loop:
    - bierner.markdown-preview-github-styles-0.1.6.vsix
    - hnw.vscode-auto-open-markdown-preview-0.0.4.vsix
    - redhat.ansible-0.4.5.vsix
  ignore_errors: true
  register: install_extension
  until: install_extension is not failed
  retries: 5

- name: daemon-reload, enable and start code-server
  systemd:
    name: code-server
    enabled: true
    state: started
    daemon_reload: true

# if we do not have a cert we will try to work anyway
- name: issue cert
  shell: certbot certonly --no-bootstrap --standalone -d {{ student }}-code.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }} --email ansible-network@redhat.com --noninteractive --agree-tos
  register: issue_cert
  until: issue_cert is not failed
  retries: 5
  ignore_errors: true
  when: workshop_type is defined

- name: update nginx configuration to support code server
  ansible.builtin.template:
    src: full_nginx.conf
    dest: /etc/nginx/nginx.conf
  when: workshop_type is defined

- name: instruqt - update nginx configuration to support code server
  blockinfile:
    block: "{{ lookup('template', 'nginx_instruqt.conf') }}"
    dest: /etc/nginx/nginx.conf
    insertbefore: "location / "
  when: workshop_type is not defined

- name: configure nginx on Automation controller
  include_tasks: "controller.yml"
  when: workshop_type is defined

- name: start Automation controller
  include_tasks: "service/controller_start.yml"

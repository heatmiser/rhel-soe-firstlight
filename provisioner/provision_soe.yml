---
- name: initial check setup
  hosts: localhost
  connection: local
  become: false
  gather_facts: true
  tasks:
    - name: scenario collection final check
      block:
        - name: run pre-check role to make sure scenario will complete provisioning
          include_role:
            name: ../roles/scenario_check_setup

        - name: run AWS check setup if using AWS
          include_role:
            name: ../roles/aws_check_setup

        - name: download AAP
          include_role:
            name: ../roles/aap_download
          when: not pre_build|bool

      rescue:
        - name: Error with setup
          fail:
            msg: The provisioner has failed during initial check_setup, please scroll up to see exact error.  Open an issue on https://github.com/ansible/scenarios/issues

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: Cluster nodes
      set_fact:
        control_nodes: 4
      when: create_cluster is defined and create_cluster|bool
    - include_role:
        name: ../roles/manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes:attendance"
  become: true
  gather_facts: false
  tasks:
    - include_role:
        name: ../roles/connectivity_test

- name: configure host names on managed nodes
  hosts: "managed_nodes"
  become: true
  gather_facts: false
  tasks:
    - hostname:
        name: "{{ short_name|default('node') }}.example.com"

    - name: setup /etc/hosts file per student
      copy:
        src: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ student }}-etchosts.txt"
        dest: "/etc/hosts"

- name: Configure nginx on attendance host
  hosts: attendance
  become: true
  gather_facts: true
  tasks:
    - include_role:
        name: ../roles/scenario_attendance
      when: attendance|bool

- name: wait for all security nodes to have SSH reachability
  hosts: "security_connection_check"
  become: true
  gather_facts: false
  tasks:
    - include_role:
        name: ../roles/connectivity_test

- name: Configure common options and control nodes
  hosts: "control_nodes"
  gather_facts: true
  become: true
  tasks:
    - name: configure user accounts
      include_role:
        name: ../roles/user_accounts

    - name: configure common role
      include_role:
        name: ../roles/common

    - name: setup /etc/hosts file per student
      copy:
        src: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ student }}-etchosts.txt"
        dest: "/etc/hosts"

    - name: configure control_node role
      include_role:
        name: ../roles/control_node
      when: not pre_build|bool

    - name: configure control_node_always role
      include_role:
        name: ../roles/control_node_always

    - name: install and configure code server
      include_role:
        name: ../roles/code_server
      when:
        - code_server is defined
        - code_server
        - controllerinstall is defined
        - controllerinstall

    - name: add dns entires for all student control nodes
      include_role:
        name: ../roles/aws_dns
      when:
        - dns_type is defined
        - dns_type == "aws"
        - controllerinstall is defined
        - controllerinstall

    - name: run populate_controller role
      include_role:
        name: ../roles/populate_controller
      when:
        - controllerinstall is defined
        - controllerinstall|bool
        - populatecontroller

- name: configure private automation hub
  hosts: 'automation_hub'
  gather_facts: true
  become: true
  tasks:
    - include_role:
        name: ../roles/private_automation_hub
      when:
        - automation_hub is defined
        - automation_hub|bool

- name: include scenario_type unique setup roles
  import_playbook: "{{ playbook_dir }}/scenario_specific/{{ scenario_type }}.yml"

- name: setup demos
  hosts: control_nodes
  gather_facts: false
  vars:
    my_tower_username: admin
    my_tower_password: "{{ admin_password }}"
    my_tower_host: "{{ ansible_host }}"
  tasks:
    - name: install demos from ansible.product_demos collection
      block:
        - name: install demo
          include_role:
            name: "ansible.product_demos.install_demo"
          when:
            - demo is defined
            - controllerinstall is defined
            - controllerinstall
      rescue:
        - name: install demo
          debug:
            msg: "Demos were NOT installed"

        - name: update demo_information var
          set_fact:
            demo_information: "Demo issue: Demos were NOT installed"

- name: Alert the mothership
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - {include_role: {name: ../roles/tower_request}, when: student_total > 9}

- name: print out information for instructor
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: set facts for output
      set_fact:
        summary_information: |
          PROVISIONER SUMMARY
          *******************
          - Scenario name is {{ ec2_name_prefix }}
          - Instructor inventory is located at  {{ playbook_dir }}/{{ ec2_name_prefix }}/instructor_inventory.txt
          - Private key is located at {{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem
          {% if attendance %}
          - {{ hostvars['attendance-host'].login_website_information | default("attendance feature is not functioning") }}
          {% endif %}

          FAILURES
          *******************
          {{ dns_information }}
          {{ callback_information }}
          {{ demo_information }}

    - name: Print Summary Information
      debug:
        msg: "{{ summary_information }}"
